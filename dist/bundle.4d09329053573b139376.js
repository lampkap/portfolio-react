webpackJsonp([1],[,,,,,,function(e,t,n){"use strict";function r(e){return"[object Array]"===j.call(e)}function o(e){return"[object ArrayBuffer]"===j.call(e)}function a(e){return"undefined"!=typeof FormData&&e instanceof FormData}function i(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer}function s(e){return"string"==typeof e}function u(e){return"number"==typeof e}function c(e){return void 0===e}function l(e){return null!==e&&"object"==typeof e}function f(e){return"[object Date]"===j.call(e)}function d(e){return"[object File]"===j.call(e)}function p(e){return"[object Blob]"===j.call(e)}function m(e){return"[object Function]"===j.call(e)}function h(e){return l(e)&&m(e.pipe)}function v(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams}function y(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}function b(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)}function g(e,t){if(null!==e&&void 0!==e)if("object"==typeof e||r(e)||(e=[e]),r(e))for(var n=0,o=e.length;n<o;n++)t.call(null,e[n],n,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.call(null,e[a],a,e)}function w(){function e(e,n){"object"==typeof t[n]&&"object"==typeof e?t[n]=w(t[n],e):t[n]=e}for(var t={},n=0,r=arguments.length;n<r;n++)g(arguments[n],e);return t}function E(e,t,n){return g(t,function(t,r){e[r]=n&&"function"==typeof t?_(t,n):t}),e}var _=n(54),k=n(125),j=Object.prototype.toString;e.exports={isArray:r,isArrayBuffer:o,isBuffer:k,isFormData:a,isArrayBufferView:i,isString:s,isNumber:u,isObject:l,isUndefined:c,isDate:f,isFile:d,isBlob:p,isFunction:m,isStream:h,isURLSearchParams:v,isStandardBrowserEnv:b,forEach:g,merge:w,extend:E,trim:y}},,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";(function(t){function r(e,t){!o.isUndefined(e)&&o.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var o=n(6),a=n(103),i={"Content-Type":"application/x-www-form-urlencoded"},s={adapter:function(){var e;return"undefined"!=typeof XMLHttpRequest?e=n(50):void 0!==t&&(e=n(50)),e}(),transformRequest:[function(e,t){return a(t,"Content-Type"),o.isFormData(e)||o.isArrayBuffer(e)||o.isBuffer(e)||o.isStream(e)||o.isFile(e)||o.isBlob(e)?e:o.isArrayBufferView(e)?e.buffer:o.isURLSearchParams(e)?(r(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):o.isObject(e)?(r(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};s.headers={common:{Accept:"application/json, text/plain, */*"}},o.forEach(["delete","get","head"],function(e){s.headers[e]={}}),o.forEach(["post","put","patch"],function(e){s.headers[e]=o.merge(i)}),e.exports=s}).call(t,n(33))},,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r=n(6),o=n(95),a=n(98),i=n(104),s=n(102),u=n(53),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(97);e.exports=function(e){return new Promise(function(t,l){var f=e.data,d=e.headers;r.isFormData(f)&&delete d["Content-Type"];var p=new XMLHttpRequest,m="onreadystatechange",h=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in p||s(e.url)||(p=new window.XDomainRequest,m="onload",h=!0,p.onprogress=function(){},p.ontimeout=function(){}),e.auth){var v=e.auth.username||"",y=e.auth.password||"";d.Authorization="Basic "+c(v+":"+y)}if(p.open(e.method.toUpperCase(),a(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p[m]=function(){if(p&&(4===p.readyState||h)&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?i(p.getAllResponseHeaders()):null,r=e.responseType&&"text"!==e.responseType?p.response:p.responseText,a={data:r,status:1223===p.status?204:p.status,statusText:1223===p.status?"No Content":p.statusText,headers:n,config:e,request:p};o(t,l,a),p=null}},p.onerror=function(){l(u("Network Error",e,null,p)),p=null},p.ontimeout=function(){l(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var b=n(100),g=(e.withCredentials||s(e.url))&&e.xsrfCookieName?b.read(e.xsrfCookieName):void 0;g&&(d[e.xsrfHeaderName]=g)}if("setRequestHeader"in p&&r.forEach(d,function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)}),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){p&&(p.abort(),l(e),p=null)}),void 0===f&&(f=null),p.send(f)})}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";var r=n(94);e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(10),c=r(u),l=n(107),f=r(l),d=n(110),p=r(d),m=n(106),h=r(m),v=function(e){function t(){return o(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),s(t,[{key:"componentDidMount",value:function(){var e=this;document.querySelectorAll('a[href^="#"]').forEach(function(t){return t.onclick=e.anchorLinkHandler})}},{key:"anchorLinkHandler",value:function(e){e.preventDefault();var t=this.href.slice(this.href.indexOf("#")),n=document.querySelector(t),r=n.getBoundingClientRect().top,o=n.getBoundingClientRect().left;window.scrollBy({top:r,left:o,behavior:"smooth"});var a=setInterval(function(){var e=n.getBoundingClientRect().top,t=n.getBoundingClientRect().left;0===Math.floor(e)&&0===Math.floor(t)&&(n.tabIndex="-1",n.focus(),clearInterval(a))},100)}},{key:"render",value:function(){return c.default.createElement("div",null,c.default.createElement(f.default,null),c.default.createElement(p.default,null),c.default.createElement(h.default,null))}}]),t}(u.Component);t.default=v},function(e,t){},,function(e,t,n){e.exports=n(89)},function(e,t,n){"use strict";function r(e){var t=new i(e),n=a(i.prototype.request,t);return o.extend(n,i.prototype,t),o.extend(n,t),n}var o=n(6),a=n(54),i=n(91),s=n(31),u=r(s);u.Axios=i,u.create=function(e){return r(o.merge(s,e))},u.Cancel=n(51),u.CancelToken=n(90),u.isCancel=n(52),u.all=function(e){return Promise.all(e)},u.spread=n(105),e.exports=u,e.exports.default=u},function(e,t,n){"use strict";function r(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new o(e),t(n.reason))})}var o=n(51);r.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},r.source=function(){var e;return{token:new r(function(t){e=t}),cancel:e}},e.exports=r},function(e,t,n){"use strict";function r(e){this.defaults=e,this.interceptors={request:new i,response:new i}}var o=n(31),a=n(6),i=n(92),s=n(93),u=n(101),c=n(99);r.prototype.request=function(e){"string"==typeof e&&(e=a.merge({url:arguments[0]},arguments[1])),e=a.merge(o,this.defaults,{method:"get"},e),e.method=e.method.toLowerCase(),e.baseURL&&!u(e.url)&&(e.url=c(e.baseURL,e.url));var t=[s,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},a.forEach(["delete","get","head","options"],function(e){r.prototype[e]=function(t,n){return this.request(a.merge(n||{},{method:e,url:t}))}}),a.forEach(["post","put","patch"],function(e){r.prototype[e]=function(t,n,r){return this.request(a.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=r},function(e,t,n){"use strict";function r(){this.handlers=[]}var o=n(6);r.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},r.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},r.prototype.forEach=function(e){o.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=r},function(e,t,n){"use strict";function r(e){e.cancelToken&&e.cancelToken.throwIfRequested()}var o=n(6),a=n(96),i=n(52),s=n(31);e.exports=function(e){return r(e),e.headers=e.headers||{},e.data=a(e.data,e.headers,e.transformRequest),e.headers=o.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),o.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||s.adapter)(e).then(function(t){return r(e),t.data=a(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(r(e),t&&t.response&&(t.response.data=a(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(53);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";function r(){this.message="String contains an invalid character"}function o(e){for(var t,n,o=String(e),i="",s=0,u=a;o.charAt(0|s)||(u="=",s%1);i+=u.charAt(63&t>>8-s%1*8)){if((n=o.charCodeAt(s+=.75))>255)throw new r;t=t<<8|n}return i}var a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.prototype=new Error,r.prototype.code=5,r.prototype.name="InvalidCharacterError",e.exports=o},function(e,t,n){"use strict";function r(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var o=n(6);e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(o.isURLSearchParams(t))a=t.toString();else{var i=[];o.forEach(t,function(e,t){null!==e&&void 0!==e&&(o.isArray(e)&&(t+="[]"),o.isArray(e)||(e=[e]),o.forEach(e,function(e){o.isDate(e)?e=e.toISOString():o.isObject(e)&&(e=JSON.stringify(e)),i.push(r(t)+"="+r(e))}))}),a=i.join("&")}return a&&(e+=(-1===e.indexOf("?")?"?":"&")+a),e}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(6);e.exports=r.isStandardBrowserEnv()?function(){return{write:function(e,t,n,o,a,i){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(a)&&s.push("domain="+a),!0===i&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}()},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";var r=n(6);e.exports=r.isStandardBrowserEnv()?function(){function e(e){var t=e;return n&&(o.setAttribute("href",t),t=o.href),o.setAttribute("href",t),{href:o.href,protocol:o.protocol?o.protocol.replace(/:$/,""):"",host:o.host,search:o.search?o.search.replace(/^\?/,""):"",hash:o.hash?o.hash.replace(/^#/,""):"",hostname:o.hostname,port:o.port,pathname:"/"===o.pathname.charAt(0)?o.pathname:"/"+o.pathname}}var t,n=/(msie|trident)/i.test(navigator.userAgent),o=document.createElement("a");return t=e(window.location.href),function(n){var o=r.isString(n)?e(n):n;return o.protocol===t.protocol&&o.host===t.host}}():function(){return function(){return!0}}()},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(6);e.exports=function(e){var t,n,o,a={};return e?(r.forEach(e.split("\n"),function(e){o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t&&(a[t]=a[t]?a[t]+", "+n:n)}),a):a}},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(10),c=r(u),l=n(88),f=r(l),d=function(e){function t(e){return o(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return i(t,e),s(t,[{key:"setLabelPosition",value:function(e){""===e.target.value?e.target.nextElementSibling.classList.remove("sticky"):e.target.nextElementSibling.classList.add("sticky")}},{key:"handleSubmit",value:function(e){e.preventDefault();var t=e.target,n=new FormData(t);f.default.post("/contact",{name:n.get("name"),email:n.get("email"),message:n.get("message"),date:n.get("date")}).then(function(e){var n=document.querySelectorAll(".error--message"),r=document.querySelectorAll(".input--line"),o=document.querySelector(".success--message");n.forEach(function(e){e.remove()}),r.forEach(function(e){e.classList.remove("error")}),1===e.data.success?(t.classList.add("hidden"),setTimeout(function(){t.classList.add("removed"),o.classList.remove("removed")},250),setTimeout(function(){o.classList.add("shown")},500)):Object.keys(e.data).forEach(function(t){var n=document.querySelector(".input--wrapper."+t),r=document.querySelector("#"+t),o=document.createElement("p");o.classList.add("error--message"),o.innerHTML=e.data[t],n.insertBefore(o,n.firstChild),r.classList.add("error")})})}},{key:"render",value:function(){var e=this;return c.default.createElement("section",{className:"contact",id:"contact"},c.default.createElement("div",{className:"content-wrapper"},c.default.createElement("div",{className:"contact--head"},c.default.createElement("h1",null,"Get in touch."),c.default.createElement("div",{className:"divider"})),c.default.createElement("div",{className:"contact--content"},c.default.createElement("p",{className:"contact--intro"},"If you have any questions or just want to say hello, you can fill out the form below or mail me at ",c.default.createElement("a",{href:"mailto:info@diemleyssen.be"},"info@diemleyssen.be"),"."),c.default.createElement("form",{method:"post",className:"contact--form",onSubmit:function(t){return e.handleSubmit(t)}},c.default.createElement("div",{className:"input--wrapper name"},c.default.createElement("input",{onInput:function(t){return e.setLabelPosition(t)},className:"input--line",name:"name",id:"name",type:"text"}),c.default.createElement("label",{htmlFor:"name",className:"input--label"},"Name ",c.default.createElement("small",null,"*"))),c.default.createElement("div",{className:"input--wrapper email"},c.default.createElement("input",{onInput:function(t){return e.setLabelPosition(t)},className:"input--line",name:"email",id:"email",type:"email"}),c.default.createElement("label",{htmlFor:"email",className:"input--label"},"Email address ",c.default.createElement("small",null,"*"))),c.default.createElement("div",{className:"input--wrapper message"},c.default.createElement("textarea",{onInput:function(t){return e.setLabelPosition(t)},name:"message",className:"input--line",id:"message",rows:"7"}),c.default.createElement("label",{className:"input--label",htmlFor:"message"},"Message ",c.default.createElement("small",null,"*"))),c.default.createElement("div",{className:"input--wrapper"},c.default.createElement("input",{type:"text",name:"date",id:"date"}),c.default.createElement("label",{className:"input--label",htmlFor:"date"},"Date")),c.default.createElement("div",{className:"input--wrapper"},c.default.createElement("button",{type:"submit",className:"button"},"Send"))),c.default.createElement("div",{className:"success--message removed"},c.default.createElement("h3",null,"Thanks for your message!"),"Your message has been successfully sent. I'll get back to you as soon as possible."))))}}]),t}(u.Component);t.default=d},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(10),c=r(u),l=n(108),f=r(l),d=function(e){function t(e){return o(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return i(t,e),s(t,[{key:"enterBackground",value:function(e){var t=e.target;t.classList.remove("left"),t.classList.remove("right"),t.classList.add("center")}},{key:"leaveBackground",value:function(e){var t=e.target;t.classList.remove("left"),t.classList.remove("center"),t.classList.add("right"),setTimeout(function(){t.classList.remove("right"),t.classList.remove("center"),t.classList.add("no-transition"),t.classList.add("left")},155),setTimeout(function(){t.classList.remove("no-transition")},205)}},{key:"render",value:function(){var e=this;return c.default.createElement("header",{className:"head",id:"head"},c.default.createElement("div",{className:"content-wrapper"},c.default.createElement(f.default,null),c.default.createElement("div",{className:"head--content"},c.default.createElement("h1",{className:"head--title"},"Hello."),c.default.createElement("span",{className:"divider"}),c.default.createElement("p",{className:"head--text"},"My name is Diëm. I’m a webdeveloper with a passion for back-end. ",c.default.createElement("br",null),"I’m currently working at Novation in Genk, Belgium."),c.default.createElement("p",{className:"head--text"},"To find out more about me, check out ",c.default.createElement("a",{className:"info--link",id:"resume",target:"_blank",href:"http://www.diemleyssen.be/resume/resume.pdf",onMouseEnter:function(t){return e.enterBackground(t)},onMouseLeave:function(t){return e.leaveBackground(t)}},"my resume"),"."))),c.default.createElement("span",{className:"scroll-indicator"}))}}]),t}(u.Component);t.default=d},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(10),u=function(e){return e&&e.__esModule?e:{default:e}}(s),c=function(e){function t(e){r(this,t);var n=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.activeNavItems=n.activeNavItems.bind(n),n.handleClick=n.handleClick.bind(n),n}return a(t,e),i(t,[{key:"componentDidMount",value:function(){this.activeNavItems(),window.addEventListener("scroll",this.activeNavItems)}},{key:"activeNavItems",value:function(){for(var e=document.getElementsByClassName("head--content"),t=document.getElementsByClassName("project"),n=document.querySelector("#head_link"),r=document.querySelector("#projects_link"),o=document.querySelector(".mobile--navigation .head_link"),a=document.querySelector(".mobile--navigation .projects_link"),i=0;i<t.length;i++)this.addActiveNavElement(t[i],r,a);this.addActiveNavElement(e[0],n,o)}},{key:"isInViewport",value:function(e){var t=e.getBoundingClientRect(),n=document.documentElement;return t.top>=0&&t.bottom<=(window.innerHeight||n.clientHeight)}},{key:"addActiveNavElement",value:function(e,t,n){var r=document.querySelectorAll(".navigation--link a"),o=document.querySelectorAll(".mobile--navigation a");this.isInViewport(e)&&(r.forEach(function(e){e.classList.remove("active")}),o.forEach(function(e){e.classList.remove("active")}),t.classList.add("active"),n.classList.add("active"))}},{key:"handleClick",value:function(){var e=document.getElementById("menu-link"),t=document.querySelector(".mobile--navigation__links"),n=document.querySelector(".mobile--navigation");t.classList.remove("hidden"),n.classList.remove("hidden"),t.classList.add("animated"),e.classList.contains("active")?this.closeMenu(e):this.openMenu(e)}},{key:"closeMenu",value:function(){var e=document.querySelector(".mobile--navigation__links"),t=document.getElementById("menu-link"),n=document.querySelector(".mobile--navigation");t.classList.remove("active"),e.classList.add("animate-out"),e.classList.remove("animated"),setTimeout(function(){e.classList.add("hidden"),e.classList.remove("bg-white")},250),setTimeout(function(){e.classList.remove("animate-out"),n.classList.add("hidden")},500)}},{key:"openMenu",value:function(e){var t=document.querySelector(".mobile--navigation__links");e.classList.add("active"),setTimeout(function(){t.classList.add("bg-white")},250)}},{key:"render",value:function(){return u.default.createElement("div",null,u.default.createElement("nav",{className:"navigation"},u.default.createElement("ul",{className:"navigation--links"},u.default.createElement("li",{className:"navigation--link"},u.default.createElement("a",{id:"head_link",href:"#head",className:"active"},"home")),u.default.createElement("li",{className:"navigation--link"},u.default.createElement("a",{id:"projects_link",href:"#projects"},"projects")))),u.default.createElement("div",{className:"mobile--navigation hidden"},u.default.createElement("div",{className:"mobile--navigation__links hidden"},u.default.createElement("ul",null,u.default.createElement("li",null,u.default.createElement("a",{href:"#head",onClick:this.closeMenu,className:"head_link active"},"home")),u.default.createElement("li",null,u.default.createElement("a",{href:"#projects",onClick:this.closeMenu,className:"projects_link"},"projects")))),u.default.createElement("div",{className:"overlay"})),u.default.createElement("a",{href:"javascript:;",id:"menu-link",onClick:this.handleClick},u.default.createElement("div",{id:"burger"})))}}]),t}(s.Component);t.default=c},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(10),u=function(e){return e&&e.__esModule?e:{default:e}}(s),c=function(e){function t(e){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return a(t,e),i(t,[{key:"render",value:function(){var e="project project--"+this.props.direction;return u.default.createElement("article",{className:e},u.default.createElement("div",{className:"project--img__wrapper"},u.default.createElement("figure",{className:"project--image"},u.default.createElement("img",{src:this.props.image,alt:""}))),u.default.createElement("div",{className:"project--content"},u.default.createElement("h2",null,this.props.name),u.default.createElement("p",null,this.props.description),u.default.createElement("div",{className:"project--link"},u.default.createElement("a",{className:"project--link__link button",href:this.props.link,target:"_blank"},"Visit website"),u.default.createElement("span",{className:"project--link__border"}))))}}]),t}(s.Component);t.default=c},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(10),c=r(u),l=n(109),f=r(l),d=function(e){function t(e){o(this,t);var n=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleScroll=n.handleScroll.bind(n),n}return i(t,e),s(t,[{key:"componentDidMount",value:function(){window.addEventListener("scroll",this.handleScroll)}},{key:"handleScroll",value:function(){var e=this;document.querySelectorAll(".project").forEach(function(t){e.isInViewport(t)&&t.classList.add("animated")})}},{key:"isInViewport",value:function(e){var t=e.getBoundingClientRect(),n=document.documentElement;return t.top>=0&&t.bottom<=(window.innerHeight||n.clientHeight)}},{key:"render",value:function(){return c.default.createElement("section",{className:"projects",id:"projects"},c.default.createElement("div",{className:"content-wrapper"},c.default.createElement("div",{className:"projects--head"},c.default.createElement("h1",null,"My work."),c.default.createElement("div",{className:"divider"})),c.default.createElement(f.default,{direction:"rtl",image:"img/baj.jpg",name:"BAJ BETON",description:"A multilingual Drupal 8 website for BAJ Beton with a custom quote calculation module. This tool calculates the price on the fly based on user input. The submissions are exported to an ERP system.",link:"https://www.baj.be/"}),c.default.createElement(f.default,{direction:"ltr",image:"img/impact.jpg",name:"IMPACT",description:"A multilingual Drupal 7 website for Impact interim where users can register and log in to apply for a vacancy in one click. Impact uses the restws API to create applications from data sent by a third party.",link:"https://www.impact.be/"}),c.default.createElement(f.default,{direction:"rtl",image:"img/cartesio.jpg",name:"CARTESIO",description:"A multilingual Drupal 7 website for Cartesio. Cartesio uses a third party software Carerix to create vacancies and to send applications from the website to Carerix.",link:"https://www.cartesio.be/"}),c.default.createElement(f.default,{direction:"ltr",image:"img/assurbike.jpg",name:"ASSURBIKE",description:"A Drupal 7 website and a webapplication build with symfony. Assurbike lets you compare different insurance companies based on your entered values.",link:"https://www.assurbike.be/"}),c.default.createElement(f.default,{direction:"rtl",image:"img/servicerent.jpg",name:"SERVICERENT",description:"A Drupal 7 website for the leasing company Service Rent.",link:"https://www.servicerent.be/"}),c.default.createElement(f.default,{direction:"ltr",image:"img/trias.jpg",name:"TRIAS",description:"A Drupal 7 multisite for the NGO Trias.",link:"https://www.trias.ngo/"})))}}]),t}(u.Component);t.default=d},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var o=n(10),a=r(o),i=n(30),s=r(i),u=n(85),c=r(u);n(86),s.default.render(a.default.createElement(c.default,null),document.getElementById("root"))},,,,,,,,,,,,,,function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}function r(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||r(e)||!!e._isBuffer)}}],[111]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,